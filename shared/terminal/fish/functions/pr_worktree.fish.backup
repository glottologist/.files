function pr_worktree
    set -l usage "Usage: pr_worktree [--root DIR] [--repo OWNER/REPO] [--force] [--verbose] <PR_number>"

    # ---- defaults ----
    set -l root "./prs"
    set -l repo ""
    set -l force 0
    set -l verbose 0
    set -l positionals

    # ---- parse flags ----
    if type -q argparse
        argparse -n pr_worktree 'h/help' 'root=' 'repo=' 'force' 'v/verbose' -- $argv
        or begin
            echo $usage >&2
            return 2
        end
        if set -q _flag_help
            echo $usage
            return 0
        end
        if set -q _flag_root
            set root $_flag_root
        end
        if set -q _flag_repo
            set repo $_flag_repo
        end
        if set -q _flag_force
            set force 1
        end
        if set -q _flag_verbose
            set verbose 1
        end
        set positionals $argv
    else
        set positionals $argv
    end


    # ---- argument validation ----
    if test (count $positionals) -lt 1
        echo $usage >&2
        return 1
    end
    set -l pr_number $positionals[1]
    if not string match -qr '^[0-9]+$' -- "$pr_number"
        echo "[ERROR] PR number must be numeric: '$pr_number'" >&2
        return 1
    end

    test $verbose -eq 1; and echo "[DEBUG] PR number: $pr_number" >&2
    test $verbose -eq 1; and echo "[DEBUG] Root directory: $root" >&2
    if test -n "$repo"
        test $verbose -eq 1; and echo "[DEBUG] Repository: $repo" >&2
    end

    # ---- deps ----
    if not type -q git
        echo "[ERROR] git not found in PATH" >&2
        return 127
    end
    if not type -q gh
        echo "[ERROR] gh (GitHub CLI) not found in PATH" >&2
        test $verbose -eq 1; and echo "[DEBUG] Install gh from: https://cli.github.com/" >&2
        return 127
    end

    test $verbose -eq 1; and echo "[DEBUG] Dependencies check passed" >&2

    # ---- determine repo ----
    set -l repo_args
    if test -n "$repo"
        test $verbose -eq 1; and echo "[DEBUG] Using explicitly provided repository: $repo" >&2
        set repo_args --repo "$repo"
    else
        test $verbose -eq 1; and echo "[DEBUG] Attempting to infer repository from current directory" >&2
        git rev-parse --is-inside-work-tree >/dev/null 2>&1
        or begin
            echo "[ERROR] Not inside a git repository and no --repo specified" >&2
            test $verbose -eq 1; and echo "[DEBUG] Either cd to a git repository or use --repo OWNER/REPO" >&2
            return 1
        end

        set -l inferred_repo (gh repo view --json nameWithOwner --jq .nameWithOwner 2>&1)
        set -l gh_status $status
        test $verbose -eq 1; and echo "[DEBUG] gh repo view exit status: $gh_status" >&2
        test $verbose -eq 1; and echo "[DEBUG] Inferred repository: '$inferred_repo'" >&2

        if test $gh_status -ne 0
            echo "[ERROR] Failed to infer repository from current directory" >&2
            test $verbose -eq 1; and echo "[DEBUG] gh repo view output: $inferred_repo" >&2
            test $verbose -eq 1; and echo "[DEBUG] Try specifying --repo OWNER/REPO explicitly" >&2
            return 1
        end

        if test -n "$inferred_repo" -a "$inferred_repo" != "null"
            set repo_args --repo "$inferred_repo"
            test $verbose -eq 1; and echo "[DEBUG] Using inferred repository: $inferred_repo" >&2
        else
            echo "[ERROR] Could not determine repository (got: '$inferred_repo')" >&2
            return 1
        end
    end

    # ---- early PR existence & metadata ----
    test $verbose -eq 1; and echo "[DEBUG] Checking if PR #$pr_number exists..." >&2
    set -l pr_check_output (gh pr view $pr_number $repo_args 2>&1)
    set -l pr_check_status $status

    if test $pr_check_status -ne 0
        echo "[ERROR] PR #$pr_number not found or not accessible" >&2
        test $verbose -eq 1; and echo "[DEBUG] Command: gh pr view $pr_number $repo_args" >&2
        test $verbose -eq 1; and echo "[DEBUG] Exit status: $pr_check_status" >&2
        echo "$pr_check_output" | head -5 >&2
        test $verbose -eq 1; and echo "[DEBUG] Possible causes:" >&2
        test $verbose -eq 1; and echo "[DEBUG]   - PR number doesn't exist in the repository" >&2
        test $verbose -eq 1; and echo "[DEBUG]   - GitHub authentication issue (run: gh auth status)" >&2
        test $verbose -eq 1; and echo "[DEBUG]   - Wrong repository (current: $repo_args)" >&2
        return 1
    end

    test $verbose -eq 1; and echo "[DEBUG] PR #$pr_number found and accessible" >&2

    set -l head_branch (gh pr view $pr_number $repo_args --json headRefName --jq .headRefName 2>&1)
    test $verbose -eq 1; and echo "[DEBUG] Head branch: '$head_branch'" >&2
    if test "$head_branch" = "null"
        set head_branch ""
    end

    # ---- paths ----
    set -l worktree_root "$root"
    set -l worktree_path "$worktree_root/$pr_number"

    _log_verbose "Worktree root: $worktree_root"
    _log_verbose "Worktree path: $worktree_path"

    if not test -d "$worktree_root"
        _log_verbose "Creating worktree root directory: $worktree_root"
        set -l mkdir_output (mkdir -p "$worktree_root" 2>&1)
        or begin
            _log_error "Failed to create $worktree_root"
            _log_verbose "mkdir output: $mkdir_output"
            return 1
        end
    end

    if test -e "$worktree_path"
        _log_verbose "Worktree path already exists: $worktree_path"
        if test $force -eq 1
            _log_verbose "Force flag set, attempting to remove existing path"
            if test -d "$worktree_path"
                set -l dir_contents (ls -A "$worktree_path" 2>/dev/null)
                if test -n "$dir_contents"
                    _log_error "Refusing to overwrite non-empty $worktree_path (even with --force)"
                    _log_verbose "Directory contains: "(echo $dir_contents | head -c 100)
                    return 1
                end
            end
            set -l rm_output (rm -rf "$worktree_path" 2>&1)
            or begin
                _log_error "Failed to clear $worktree_path"
                _log_verbose "rm output: $rm_output"
                return 1
            end
            _log_verbose "Removed existing empty directory"
        else
            _log_error "Worktree already exists at $worktree_path"
            _log_info "Use --force to overwrite an empty directory"
            return 1
        end
    end

    # ---- create detached worktree ----
    _log_info "Creating worktree for PR #$pr_number at $worktree_path..."
    _log_verbose "Command: git worktree add --detach -- $worktree_path"
    set -l worktree_output (git worktree add --detach -- "$worktree_path" 2>&1)
    set -l worktree_status $status

    if test $worktree_status -ne 0
        _log_error "Failed to create worktree"
        _log_verbose "Exit status: $worktree_status"
        echo "$worktree_output" >&2
        return 1
    end
    _log_verbose "Worktree created successfully"

    # ---- checkout PR (with fallbacks) ----
    pushd "$worktree_path" >/dev/null
    if test -n "$head_branch"
        _log_info "Checking out PR #$pr_number (branch: $head_branch)..."
    else
        _log_info "Checking out PR #$pr_number..."
    end

    # Fast path: gh handles forks/remotes automatically (when it can)
    _log_verbose "Attempting checkout via gh pr checkout (method 1/3)"
    _log_verbose "Command: gh pr checkout $pr_number $repo_args"
    set -l gh_checkout_output (gh pr checkout $pr_number $repo_args 2>&1)
    set -l checkout_status $status
    _log_verbose "gh pr checkout exit status: $checkout_status"

    if test $checkout_status -ne 0
        _log_verbose "Method 1 failed: $gh_checkout_output"
        _log_verbose "Attempting fallback method 2: fetch from origin's pull ref"

        # Fallback A: fetch from origin's pull ref
        _log_verbose "Command: git fetch origin pull/$pr_number/head:pr-$pr_number"
        set -l fetch_output (git fetch origin "pull/$pr_number/head:pr-$pr_number" 2>&1)
        set -l fetch_status $status
        _log_verbose "git fetch exit status: $fetch_status"

        if test $fetch_status -eq 0
            _log_verbose "Fetch successful, checking out pr-$pr_number branch"
            set -l checkout_output (git checkout "pr-$pr_number" 2>&1)
            set checkout_status $status
            _log_verbose "git checkout exit status: $checkout_status"
            if test $checkout_status -ne 0
                _log_verbose "Checkout failed: $checkout_output"
            else
                _log_verbose "Method 2 succeeded"
            end
        else
            _log_verbose "Fetch failed: $fetch_output"
        end
    else
        _log_verbose "Method 1 succeeded"
    end

    if test $checkout_status -ne 0
        _log_verbose "Attempting fallback method 3: fetch from fork repository"

        # Fallback B: fork PR â€” add remote and fetch the head branch
        # Try to get a usable clone URL for the head repo (ssh/https/url)
        set -l head_url (gh pr view $pr_number $repo_args --json headRepository --jq '.headRepository.sshUrl // .headRepository.httpsUrl // .headRepository.url' 2>&1)
        _log_verbose "Head repository URL: '$head_url'"

        if test -n "$head_url" -a "$head_url" != "null"
            set -l remote_name "pr-$pr_number-remote"
            _log_verbose "Adding remote: $remote_name -> $head_url"

            git remote get-url "$remote_name" >/dev/null 2>&1
            set -l remote_exists $status

            if test $remote_exists -ne 0
                set -l add_remote_output (git remote add "$remote_name" "$head_url" 2>&1)
                set -l add_remote_status $status
                _log_verbose "git remote add exit status: $add_remote_status"
                if test $add_remote_status -ne 0
                    _log_verbose "Failed to add remote: $add_remote_output"
                end
            else
                _log_verbose "Remote already exists: $remote_name"
            end

            if test -n "$head_branch" -a "$head_branch" != "null"
                _log_verbose "Command: git fetch $remote_name $head_branch:pr-$pr_number"
                set -l fork_fetch_output (git fetch "$remote_name" "$head_branch:pr-$pr_number" 2>&1)
                set -l fork_fetch_status $status
                _log_verbose "git fetch exit status: $fork_fetch_status"

                if test $fork_fetch_status -eq 0
                    _log_verbose "Fetch successful, checking out pr-$pr_number branch"
                    set -l fork_checkout_output (git checkout "pr-$pr_number" 2>&1)
                    set checkout_status $status
                    _log_verbose "git checkout exit status: $checkout_status"

                    if test $checkout_status -eq 0
                        _log_verbose "Method 3 succeeded"
                        # set upstream (best-effort)
                        _log_verbose "Setting upstream to $remote_name/$head_branch"
                        git branch --set-upstream-to "$remote_name/$head_branch" "pr-$pr_number" >/dev/null 2>&1
                    else
                        _log_verbose "Checkout failed: $fork_checkout_output"
                    end
                else
                    _log_verbose "Fetch failed: $fork_fetch_output"
                end
            else
                _log_verbose "No head branch available for method 3"
            end
        else
            _log_verbose "No valid head repository URL found for method 3"
        end
    end
    popd >/dev/null

    if test $checkout_status -ne 0
        _log_error "Failed to checkout PR after trying all methods"
        _log_verbose "Cleaning up: removing worktree at $worktree_path"

        set -l remove_output (git worktree remove --force -- "$worktree_path" 2>&1)
        set -l remove_status $status
        if test $remove_status -ne 0
            _log_verbose "git worktree remove failed: $remove_output"
        end

        if test -e "$worktree_path"
            _log_verbose "Worktree still exists, attempting manual removal"
            set -l rm_output (rm -rf "$worktree_path" 2>&1)
            if test $status -ne 0
                _log_verbose "rm failed: $rm_output"
            end
        end

        echo "" >&2
        _log_info "Troubleshooting hints:"
        echo "  â€¢ Check GitHub authentication:" >&2
        echo "      gh auth status" >&2
        echo "  â€¢ Verify PR exists in the correct repository:" >&2
        if test -n "$repo_args"
            echo "      gh pr view $pr_number $repo_args" >&2
        else
            echo "      gh pr view $pr_number" >&2
        end
        echo "  â€¢ If PR is from a private fork, you may lack fetch rights" >&2
        echo "  â€¢ Try manual checkout:" >&2
        echo "      git fetch origin pull/$pr_number/head:pr-$pr_number" >&2
        echo "      git checkout pr-$pr_number" >&2
        echo "" >&2
        _log_info "Run with --verbose flag for detailed debugging information"
        return 1
    end

    # ---- final feedback ----
    set -l refdesc (git -C "$worktree_path" rev-parse --abbrev-ref HEAD 2>/dev/null)
    _log_verbose "Final HEAD reference: '$refdesc'"

    if test -n "$refdesc"
        echo "âœ“ PR #$pr_number ready at $worktree_path (HEAD: $refdesc)"
    else
        echo "âœ“ PR #$pr_number ready at $worktree_path"
    end

    _log_verbose "Worktree setup completed successfully"
end

